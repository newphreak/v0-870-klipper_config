###############################
#       Filament Macros       #
###############################
# TODO: Add some kind of initialization and instructions. Needs two save variables.
# printer needs to have nothing loaded.
# filament_index needs to be -1 for nothing loaded.
# filament_loaded is true/false. false when unloaded.
# This same macro should be written to also be utilized as a reset when loading fails.

[gcode_macro M600]
description: Filament Change: Map to UNLOAD_FILAMENT
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== M600 ====")}
    {% endif %}

    SAVE_GCODE_STATE NAME=M600_state
    PAUSE DEBUG={debug}
    UNLOAD_FILAMENT DEBUG={debug}
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro FILAMENT]
description: Current filament status
gcode:
    # command params
    {% set reset = params.RESET|default()|lower %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set filaments = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array|default("NONE") %}
    {% set filament_index = printer.save_variables.variables.filament_index|default(0)|int %}
    {% set filament_loaded = printer.save_variables.variables.filament_loaded|default("false")|lower %}
    {% if filament_index != 0|int %}
        {% set filament_type = filaments[filament_index][0] %}
        {% set unload_temperature = filaments[filament_index][1] %}
        {% set load_temperature = filaments[filament_index][2] %}
    {% endif %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== FILAMENT =====")}
        {action_respond_info("reset: '%s'" % (reset))}
        {action_respond_info("filaments: '%s'" % (filaments))}
        {action_respond_info("filament_index: '%s'" % (filament_index))}
        {action_respond_info("filament_loaded: '%s'" % (filament_loaded))}
        {action_respond_info("===============")}
    {% endif %}

    {% if reset == "" %}
        {% if filaments == "NONE" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info('PRINTER_VARIABLE filament_temperature_array is missing!')}
        {% elif filament_index != 0|int and filament_loaded == "true" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info("%s filaments: [%s]" % (text, filaments|string))}
            {action_respond_info("%s filament index: [%s] Filament loaded: [array: '%s']" % (text, filament_index|int, filament_loaded|lower))}
            {action_respond_info("%s loaded: [filament: '%s', load temperature: '%sc', unload temperature: '%sc'" % (text, filament_type|string, load_temperature|int, unload_temperature|int))}
        {% elif filament_index != 0|int and filament_loaded == "false" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info("ERROR: Load is in failed state. Fix with 'FILAMENT RESET=UNLOAD' to get reset state back")}
        {% elif filament_index == 0|int and filament_loaded == "false" %}
            {action_respond_info('==== FILAMENT STATUS ====')}
            {action_respond_info('no filament loaded')}
        {% endif %}
    {% elif reset == "unload" %}
        SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
        SAVE_VARIABLE VARIABLE=filament_index VALUE='"0"'
        {action_respond_info('==== FILAMENT STATUS ====')}
        {action_respond_info('Values fixed set to unload state, try loading again')}
    {% endif %}

[gcode_macro LOAD_FILAMENT_NONE]
description: Load filament of type 'NONE'
gcode:
    # variables
    {% set filament = "NONE" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}

[gcode_macro LOAD_FILAMENT_ABS]
description: Load filament of type 'ABS'
gcode:
    # variables
    {% set filament = "ABS" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=0

[gcode_macro LOAD_FILAMENT_PET]
description: Load filament of type 'PET'
gcode:
    # variables
    {% set filament = "PET" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=1

[gcode_macro LOAD_FILAMENT_FLEX]
description: Load filament of type 'FLEX'
gcode:
    # variables
    {% set filament = "FLEX" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=1

[gcode_macro LOAD_FILAMENT_ASA]
description: Load filament of type 'ASA'
gcode:
    # variables
    {% set filament = "ASA" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=0

[gcode_macro LOAD_FILAMENT_NYLON]
description: Load filament of type 'NYLON'
gcode:
    # variables
    {% set filament = "NYLON" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=0

[gcode_macro LOAD_FILAMENT_PC]
description: Load filament of type 'PC'
gcode:
    # variables
    {% set filament = "PC" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=0

[gcode_macro LOAD_FILAMENT_PLA]
description: Load filament of type 'PLA'
gcode:
    # variables
    {% set filament = "PLA" %}
    # command params
    {% set debug = params.DEBUG|default(0)|int %}

    LOAD_FILAMENT FILAMENT={filament} DEBUG={debug}
    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=1
    SET_PLATE INDEX=1

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
    # command params
    {% set filament = params.FILAMENT|default("")|upper %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set filament_index_previous = printer.save_variables.variables.filament_index_previous|default(-1)|int %}
    {% set load_distance = printer['gcode_macro _PRINTER_VARIABLE'].extruder.load_distance|default(45)|int %}
    {% set load_extrude = printer['gcode_macro _PRINTER_VARIABLE'].extruder.load_extrude|default(50)|int %}
    {% set loading_speed_fast = printer['gcode_macro _PRINTER_VARIABLE'].loading_speed_fast|default(25)|int %}
    {% set loading_speed_extrude = printer['gcode_macro _PRINTER_VARIABLE'].loading_speed_extrude|default(5)|int %}
    {% set loading_speed_fast_flex_nylon = printer['gcode_macro _PRINTER_VARIABLE'].loading_speed_fast_flex_nylon|default(16.66)|int %}
    {% set loading_speed_extrude_flex_nylon = printer['gcode_macro _PRINTER_VARIABLE'].loading_speed_extrude_flex_nylon|default(0.83)|int %}
    {% set retract_pause = printer['gcode_macro _PRINTER_VARIABLE'].extruder.pause_retract_distance|default(3)|int %}
    {% set retract_end = printer['gcode_macro _PRINTER_VARIABLE'].extruder.end_retract_distance|default(10)|int %}
    {% set end_retract_speed = printer['gcode_macro _PRINTER_VARIABLE'].extruder.end_retract_speed|default(5)|int %}
    {% set filaments_list = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array %}
    {% set load_temperature = filaments_list[filament_index_previous][2]|int %}
    {% set return_temperature = printer.extruder.target %}
    {% set ns = namespace() %}
    {% set ns.i = -1 %}
    {% set ns.filament_type = "" %}
    {% set ns.load_temperature = 0|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    # Look for the FILAMENT in our list
    {% set elem_count = filaments_list|length %}
    {% for index in range(elem_count) %}
        {% if filaments_list[index][0] == filament %}
            {% set ns.i = index %}
            {% set ns.filament_type = filaments_list[index][0]|upper %}
            {% set ns.load_temperature = filaments_list[index][2]|int %}
        {% endif %}
    {% endfor %}

    #Use the higher load temperature to purge out old filament.
    {% if ns.load_temperature > load_temperature %}
        {% set load_temperature = ns.load_temperature %}
    {% endif %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== LOAD_FILAMENT =====")}
        {action_respond_info("params.FILAMENT: '%s'" % (filament))}
        {action_respond_info("found_filament: [i: '%s', filament_type: '%s', load_temperature: '%s']" % (ns.i,ns.filament_type,load_temperature))}
        {action_respond_info("load: [distance: '%smm', extrude: '%smm']" % (load_distance, load_extrude))}
        {action_respond_info("loading_speed: [fast: '%s', extrude: '%s', fast_flex_nylon: '%s', extrude_flex_nylon: '%s']" % (loading_speed_fast,loading_speed_extrude,loading_speed_fast_flex_nylon,loading_speed_extrude_flex_nylon))}
        {action_respond_info("retract: [pause: '%smm', end: '%smm', speed: '%s']" % (retract_pause, retract_end,end_retract_speed))}
        {action_respond_info("return_temperature: '%s'" % (return_temperature))}
        {action_respond_info("filaments_list: '%s'" % (filaments_list))}
        {action_respond_info("===============")}
    {% endif %}

    {% if filament == "" %}
        RESPOND TYPE="error" MSG="ERROR: `FILAMENT=TYPE` param is required"
    {% elif filament != "" and ns.i == -1 %}
        RESPOND TYPE="error" MSG="ERROR: FILAMENT not found in `_PRINTER_VARIABLE.filament_temperature_array`"
    {% elif printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
        {% if ns.filament_type != "" and load_temperature > 0 %}
            {% set can_extrude = printer.extruder.can_extrude|lower %}
            SAVE_GCODE_STATE NAME=LOAD_FILAMENT
            {% if printer.pause_resume.is_paused|lower != "true" %}
                PARK_FRONT_MID
            {% endif %}
            G90
            M109 S{load_temperature}
            M83 # set extruder to relative
            {% if ns.filament_type != "FLEX" or ns.filament_type != "NYLON" %}
                G1 E{load_distance} F{loading_speed_fast*60} # quickly load 90mm filament
                G1 E{load_extrude} F{loading_speed_extrude*60} # slower extrusion for hotend path
            {% elif ns.filament_type == "FLEX" or ns.filament_type == "NYLON" %}
                G1 E{load_distance} F{loading_speed_fast_flex_nylon*60} # quickly load 90mm filament
                G1 E{load_extrude} F{loading_speed_extrude_flex_nylon*60} # slower extrusion for hotend path
            {% endif %}
            {% if printer.pause_resume.is_paused|lower == "true" %}
                G1 E-{retract_pause} F{end_retract_speed*60}
            {% else %}
                G1 E-{retract_end} F{end_retract_speed*60}
            {% endif %}
            M104 S{ns.load_temperature}
            SAVE_VARIABLE VARIABLE=filament_index VALUE='"{ns.i}"'
            SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
            {% if printer.idle_timeout.state|lower == "printing" or printer.print_stats.state == "paused" %}
                M104 S{return_temperature} # restore old extruder temperature
            {% elif printer.idle_timeout.state|lower == "idle" and printer.print_stats.state != "paused" %}
                UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=60
            {% elif printer.idle_timeout.state|lower == "ready" and printer.print_stats.state != "paused" %}
                UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=60
            {% endif %}
            RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
        {% else %}
            RESPOND TYPE="error" MSG="ERROR: Filament loaded or has not been unloaded correctly."
        {% endif %}
    {% else %}
        RESPOND TYPE="error" MSG="ERROR: Filament loading is disabled while printing."
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
    # command params
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set retract_pause = printer['gcode_macro _PRINTER_VARIABLE'].extruder.pause_retract_distance|default(3)|int %}
    {% set retract_end = printer['gcode_macro _PRINTER_VARIABLE'].extruder.end_retract_distance|default(10)|int %}
    {% set unloading_speed_extrude = printer['gcode_macro _PRINTER_VARIABLE'].unloading_speed_extrude|default(4.16)|int %}
    {% set unloading_speed_extrude_flex_nylon = 0.83|int %}
    {% set filaments_list = printer['gcode_macro _PRINTER_VARIABLE'].filament_temperature_array %}
    {% set filament_index = printer.save_variables.variables.filament_index|default(-1)|int %}
    {% set return_temperature = printer.extruder.target|int %}
    {% set ns = namespace() %}
    {% set ns.i = -1 %}
    {% set ns.filament_type = "" %}
    {% set ns.unload_temperature = 0|int %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if 'FILAMENT' in params %} # Check for FILAMENT override
        {% set filament = params.FILAMENT|upper %}
        {% set elem_count = filaments_list|length %}
        {% for i in range(elem_count) %}
            {% if filaments_list[i][0] == filament %}
                {% set ns.i = i %}
                {% set ns.filament_type = filaments_list[i][0]|upper %}
                {% set ns.unload_temperature = filaments_list[i][1]|int %}
            {% endif %}
        {% endfor %}
    {% elif filament_index > -1 %} # If no params.FILAMENT set, use the `filament_index` if set
        {% set ns.i = filament_index %}
        {% set ns.filament_type = filaments_list[filament_index][0]|upper %}
        {% set ns.unload_temperature = filaments_list[filament_index][1]|int %}
    {% endif %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("===== UNLOAD_FILAMENT =====")}
        {action_respond_info("filament_index: '%s'" % (filament_index))}
        {% if 'FILAMENT' in params %}
            {action_respond_info("params.FILAMENT: '%s'" % (params.FILAMENT))}
        {% endif %}
        {action_respond_info("loaded_filament: [i: '%s', filament_type: '%s', unload_temperature: '%s'" % (ns.i,ns.filament_type,ns.unload_temperature))}
        {action_respond_info("retract: [end: '%smm', pause: '%smm']" % (retract_end,retract_pause))}
        {action_respond_info("unretract: [speed_extrude: '%s', speed_extrude_flex_nylon: '%s']" % (unloading_speed_extrude,unloading_speed_extrude_flex_nylon))}
        {action_respond_info("return_temperature: '%s'" % (return_temperature))}
        {action_respond_info("filaments_list: '%s'" % (filaments_list))}
        {action_respond_info("printer: [idle_timeout.state: '%s', extruder.can_extrude: '%s', pause_resume.is_paused: '%s' ]" %
            (printer.idle_timeout.state,printer.extruder.can_extrude,printer.pause_resume.is_paused))}
        {action_respond_info("===============")}
    {% endif %}

    SET_FILAMENT_SENSOR SENSOR=filament_runout_sensor ENABLE=0
    {% if filament_index == -1 and 'FILAMENT' not in params %}
        RESPOND TYPE="error" MSG="ERROR: No saved filament found, please use `FILAMENT=TYPE`"
    {% elif 'FILAMENT' in params and ns.i == -1 %}
        RESPOND TYPE="error" MSG="ERROR: FILAMENT not found in `_PRINTER_VARIABLE.filament_temperature_array`"
    {% elif printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
        SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
        {% if printer.pause_resume.is_paused|lower != "true" %}
            PARK_FRONT_MID
        {% endif %}
        M109 S{ns.unload_temperature}
        G90
        M83
            {% if ns.filament_type != "FLEX" or ns.filament_type != "NYLON" %}
                {% if printer.pause_resume.is_paused|lower == "true" %}
                    G1 E{retract_pause+6} F{unloading_speed_extrude*60} # unretract + extrude
                {% elif printer.idle_timeout.state != "Printing" %}
                    G1 E{retract_end+6} F{unloading_speed_extrude*60} # unretract + extrude
                {% endif %}
            {% elif ns.filament_type == "FLEX" or ns.filament_type == "NYLON" %}
                {% if printer.pause_resume.is_paused|lower == "true" %}
                    G1 E{retract_pause} F{unloading_speed_extrude_flex_nylon*60} # unretract
                {% elif printer.idle_timeout.state != "Printing" %}
                    G1 E{retract_end} F{unloading_speed_extrude_flex_nylon*60} # unretract
                {% endif %}
            {% endif %}
        G92 E0
        _FORM_TIP_STANDALONE
        SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
        SAVE_VARIABLE VARIABLE=filament_index VALUE='"0"'
        SAVE_VARIABLE VARIABLE=filament_index_previous VALUE='"{ns.i}"'
        {% if printer.idle_timeout.state|lower == "printing" or printer.print_stats.state == "paused" %}
            M104 S{return_temperature} # restore old extruder temperature
        {% elif printer.idle_timeout.state|lower == "idle" and printer.print_stats.state != "paused" %}
            UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=120
        {% elif printer.idle_timeout.state|lower == "ready" and printer.print_stats.state != "paused" %}
            UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=120
        {% endif %}
        RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
    {% else %}
        RESPOND TYPE="error" MSG="ERROR: Filament unloading is disabled while printing."
    {% endif %}

# Modifed ERCF_FORM_TIP_STANDALONE from https://github.com/EtteGit/EnragedRabbitProject/blob/main/Klipper_Files/ercf_software.cfg
[gcode_macro _FORM_TIP_STANDALONE]
description: Generic tip forming macro
gcode:
    # variables
    {% set cooling_tube_length = 15|int %}
    {% set cooling_tube_retraction = 35|int %}
    {% set initial_cooling_speed = 10|int %}
    {% set final_cooling_speed = 50|int %}
    {% set cooling_moves = 5|int %}
    {% set use_skinnydip = 1|int %}
    {% set skinnydip_distance = 26|int %}
    {% set dip_insertion_speed = 33|int %}
    {% set dip_extraction_speed = 60|int %}
    {% set cooling_zone_pause = 0|int %}
    {% set unloading_speed_start = 60|int %}
    {% set unloading_speed = 20|int %}
    {% set ramming_volume = 15|int %}
    {% set unload_distance = 80|int %}
    {% set final_eject_speed = 40|int %}
    {% set ratio = (ramming_volume|float) /23.0 %}

    G91
    G92 E0
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% set RATIO = (ramming_volume|float) /23.0 %}
    G1 E{0.5784 * ratio|float} F299 #7
    G1 E{0.5834 * ratio|float} F302 #3
    G1 E{0.5918 * ratio|float} F306 #6
    G1 E{0.6169 * ratio|float} F319 #6
    G1 E{0.3393 * ratio|float} F350 #0
    G1 E{0.3363 * ratio|float} F350 #0
    G1 E{0.7577 * ratio|float} F392 #6
    G1 E{0.8382 * ratio|float} F434 #3
    G1 E{0.7776 * ratio|float} F469 #9
    G1 E{0.1293 * ratio|float} F469 #9
    G1 E{0.9673 * ratio|float} F501 #2
    G1 E{1.0176 * ratio|float} F527 #2
    G1 E{0.5956 * ratio|float} F544 #6
    G1 E{0.4555 * ratio|float} F544 #6
    G1 E{1.0662 * ratio|float} F552 #4
    # Retraction
    {% set total_retraction_distance = cooling_tube_retraction|float + cooling_tube_length|float / 2 - 15 %}
    G1 E-15 F{1.0 * unloading_speed_start|float * 60}
    G1 E-{0.7 * total_retraction_distance} F{1.0 * unloading_speed|float * 60}
    G1 E-{0.2 * total_retraction_distance} F{0.5 * unloading_speed|float * 60}
    G1 E-{0.1 * total_retraction_distance} F{0.3 * unloading_speed|float * 60}
    # Generate Cooling Moves
    {% set SPEED_INC = (final_cooling_speed|float - initial_cooling_speed|float) / (2 * cooling_moves|float - 1) %}
    {% for move in range(cooling_moves|int) %}
        G1 E{cooling_tube_length} F{(initial_cooling_speed|float + SPEED_INC*move*2) * 60}
        G1 E-{cooling_tube_length} F{(initial_cooling_speed|float + SPEED_INC*(move*2+1)) * 60}
    {% endfor %}
    # Generate a skinnydip move
    {% if use_skinnydip|int == 1 %}
        G1 E{skinnydip_distance} F{dip_insertion_speed|float * 60}
        G1 E-{skinnydip_distance} F{dip_extraction_speed|float * 60}
        G4 P{cooling_zone_pause}
    {% endif %}
    # Final eject
    G92 E0
    G1 E-{unload_distance} F{final_eject_speed*60}
    G92 E0

[delayed_gcode HEATER_OFF]
gcode:
    {action_respond_info("==== HEATER_OFF ====")}
    {% if printer.idle_timeout.state|lower != "printing" or printer.print_stats.state == "paused" %}
        M109 S0
    {% endif %}