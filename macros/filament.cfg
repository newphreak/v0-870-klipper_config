#####################################################################
#       Filaments go squirt extruder hopefully not Chrhbn4twtv
#####################################################################
[gcode_macro FILAMENT]
description: Current filament status
gcode:
  # command params
  {% set filament = printer['gcode_macro _USER_VARIABLE'].filament_temperatures|default(NOPE) %}
  {% set filamentindex = printer.save_variables.variables.filament_index|int %}
  {% set filament_loaded = printer.save_variables.variables.filament_loaded|lower %}
  # variables
  {% if filamentindex != 99|int %}
  {% set load_temperature = filament[filamentindex][2] %}
  {% set unload_temperature = filament[filamentindex][1] %}
  {% set filament_type = filament[filamentindex][0] %}
  {% endif %}
  # features
  {% if filament == NOPE %}
  {action_respond_info('USER_VARIABLE MISSING!')}
  {% endif %}
  {% if printer['gcode_macro _USER_VARIABLE'].filament_temperatures and filamentindex != 99|int %}
  {action_respond_info('==== FILAMENT STATUS ====')}
  {action_respond_info("%s Filaments: [%s]" % (text, filament|string))}
  {action_respond_info("%s Filament index: [%s] Filament loaded: [%s]" % (text, filamentindex|int, filament_loaded|lower))}
  {% if filament_loaded == "true" %}
  {action_respond_info("%s Filament: [%s] Load temperature: [%sc] Unload temperature: [%sc]" % (text, filament_type|string, load_temperature|int, unload_temperature|int))}
  {% endif %}
  {% endif %}
  {% if printer['gcode_macro _USER_VARIABLE'].filament_temperatures and filamentindex == 99|int and filament_loaded == "true" %}
  {action_respond_info('LOAD FAILED, FIX SAVED VARIABLES!')}
  {% endif %}
  {% if printer['gcode_macro _USER_VARIABLE'].filament_temperatures and filamentindex == 99|int and filament_loaded == "false" %}	
  {action_respond_info("filament loaded: [%s]" % (filament_loaded))}
  {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
  # command params
  {% set load_distance = printer['gcode_macro _USER_VARIABLE'].load_distance|int %}
  {% set load_extrude = printer['gcode_macro _USER_VARIABLE'].load_extrude|int %}
  {% set retract_pause = printer['gcode_macro _USER_VARIABLE'].retract_pause|int %}										   
  {% set retract_end = printer['gcode_macro _USER_VARIABLE'].retract_end|int %}
  {% set filament = printer['gcode_macro _USER_VARIABLE'].filament_temperatures %}
  {% set saved_filamentindex = printer.save_variables.variables.filament_index|int %}
  {% set filamentindex = params.I|int %}
  # variables
  {% set extruder_target = printer.extruder.target %}
  {% set load_temperature = filament[filamentindex][2] %}
  {% set filament_type = filament[filamentindex][0] %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}

      
  {% if ena_debug == "true" %}
    {action_respond_info('==== LOAD_FILAMENT ====')}
    {action_respond_info("%s Settings: [%s]" % (text, filament|string))}
    {action_respond_info("%s Filament index: [%s] Saved filament index: [%s]" % (text, filamentindex|int, saved_filamentindex|int))}
    {action_respond_info("%s Filament: [%s] Load temperature: [%sc]" % (text, filament_type|string, load_temperature|int))}
    {action_respond_info("load distance: [%smm] load extrude: [%smm]" % (load_distance, load_extrude))}
    {action_respond_info("retract_pause: [%smm] retract_end: [%smm]" % (retract_pause, retract_end))}
    {action_respond_info("extruder was: [%sc]" % (extruder_target))}
    {action_respond_info('===============')}
  {% endif %}

  {% if saved_filamentindex == 99 %}
  SAVE_GCODE_STATE NAME=LOAD_FILAMENT
  PARK_FRONT_MID
  G90 ; absolute positioning
  {% if filament_type == "PLA" %}
    M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"0"'
  {% elif filament_type == "ABS" %}
    M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"1"'
  {% elif filament_type == "PET" %}
    M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"2"'
  {% elif filament_type == "FLEX" %}
	  M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"3"'
  {% elif filament_type == "ASA" %}
	  M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"4"'
  {% elif filament_type == "NYLON" %}
	  M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"5"'
  {% elif filament_type == "PC" %}
	  M109 S{load_temperature}
	  SAVE_VARIABLE VARIABLE=filament_index VALUE='"6"'
  {% endif %}
  M83 ; set extruder to relative
  G1 E{load_distance} F1500 ; quickly load 90mm filament
  G1 E{load_extrude} F300 ; slower extrusion for hotend path
  {% if printer.print_stats.state == "paused" %}
  G1 E{retract_pause} F600
  {% else %}
  G1 E-{retract_end} F600 ; retract
  {% endif %} 
  SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
  {% if printer.idle_timeout.state == "Printing" %}
    M109 S{extruder_target} ; restore old extruder temperature
  {% else %}
    UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=300
  {% endif %}
  RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
  {% else %}
  {action_respond_info('ERROR: Filament loaded or has not been unloaded correctly.')}
  {% endif %}
  
[gcode_macro UNLOAD_FILAMENT]
gcode:
  # command params
  {% set unretract_start = printer['gcode_macro _USER_VARIABLE'].unretract_start|float %}
  {% set filament = printer['gcode_macro _USER_VARIABLE'].filament_temperatures %}
  {% set filamentindex = printer.save_variables.variables.filament_index|int %}
  # variables
  {% set extruder_target = printer.extruder.target|int %}
  {% set filament_type = filament[filamentindex][0] %}
  {% set unload_temperature = filament[filamentindex][1] %}
    # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== UNLOAD_FILAMENT ====')}
    {action_respond_info("%s Settings: [%s]" % (text, filament|string))}
    {action_respond_info("%s Filament index: [%s]" % (text, filamentindex|int))}
    {action_respond_info("%s Filament: [%s] Unoad temperature: [%sc]" % (text, filament_type|string, unload_temperature|int))}
    {action_respond_info("unload distance: [%smm] unretract start: [%smm]" % (unload_distance, unretract_start))}
    {action_respond_info("extruder was: [%sc]" % (extruder_target))}
    {action_respond_info('===============')}
  {% endif %}

  {% if filamentindex != 99 %}
  SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
  PARK_FRONT_MID
  {% if filament_type %}
    M109 S{unload_temperature}
  {% endif %}
  SAVE_VARIABLE VARIABLE=filament_index VALUE='"99"'
  G90 # Absolute Positioning
  M83 # Make the E relative independant of other axis
  G1 E{unretract_start} F250 # Unretract filament
  G92 E0
  ERCF_FORM_TIP_STANDALONE
  SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
  {% if printer.idle_timeout.state == "Printing" %}
    M109 S{extruder_target} ; restore old extruder temperature
  {% else %}
    UPDATE_DELAYED_GCODE ID=HEATER_OFF DURATION=300
  {% endif %}
  RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
  {% else %}
  {action_respond_info('ERROR: Filament loaded or has not been unloaded correctly.')}
  {% endif %}

[gcode_macro ERCF_FORM_TIP_STANDALONE]
description: Generic tip forming macro
gcode:
  {% set COOLING_TUBE_LENGTH = printer['gcode_macro _USER_VARIABLE'].cooling_tube_length|int %}
  {% set COOLING_TUBE_RETRACTION = printer['gcode_macro _USER_VARIABLE'].cooling_tube_retraction|int %}
  {% set INITIAL_COOLING_SPEED = printer['gcode_macro _USER_VARIABLE'].initial_cooling_speed|int %}
  {% set FINAL_COOLING_SPEED = printer['gcode_macro _USER_VARIABLE'].final_cooling_speed|int %}
  {% set COOLING_MOVES = printer['gcode_macro _USER_VARIABLE'].cooling_moves|int %}
  {% set USE_SKINNYDIP = printer['gcode_macro _USER_VARIABLE'].use_skinnydip|int %}
  {% set SKINNYDIP_DISTANCE = printer['gcode_macro _USER_VARIABLE'].skinnydip_distance|int %}
  {% set DIP_INSERTION_SPEED = printer['gcode_macro _USER_VARIABLE'].dip_insertion_speed|int %}
  {% set DIP_EXTRACTION_SPEED = printer['gcode_macro _USER_VARIABLE'].dip_extraction_speed|int %}
  {% set COOLING_ZONE_PAUSE = printer['gcode_macro _USER_VARIABLE'].cooling_zone_pause|int %}
  {% set UNLOADING_SPEED_START = printer['gcode_macro _USER_VARIABLE'].unloading_speed_start|int %}
  {% set UNLOADING_SPEED = printer['gcode_macro _USER_VARIABLE'].unloading_speed|int %}
  {% set RAMMING_VOLUME = printer['gcode_macro _USER_VARIABLE'].ramming_volume|int %}	
  {% set UNLOAD_DISTANCE = printer['gcode_macro _USER_VARIABLE'].unload_distance|int %}

    G91
    G92 E0
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% set RATIO = (RAMMING_VOLUME|float) /23.0 %}
    G1 E{0.5784 * RATIO|float} F299 #7
    G1 E{0.5834 * RATIO|float} F302 #3
    G1 E{0.5918 * RATIO|float} F306 #6
    G1 E{0.6169 * RATIO|float} F319 #6
    G1 E{0.3393 * RATIO|float} F350 #0
    G1 E{0.3363 * RATIO|float} F350 #0
    G1 E{0.7577 * RATIO|float} F392 #6
    G1 E{0.8382 * RATIO|float} F434 #3
    G1 E{0.7776 * RATIO|float} F469 #9
    G1 E{0.1293 * RATIO|float} F469 #9
    G1 E{0.9673 * RATIO|float} F501 #2
    G1 E{1.0176 * RATIO|float} F527 #2
    G1 E{0.5956 * RATIO|float} F544 #6
    G1 E{0.4555 * RATIO|float} F544 #6
    G1 E{1.0662 * RATIO|float} F552 #4
    # Retraction
    {% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_RETRACTION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
    G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
    G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
    G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
    G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}
    # Generate Cooling Moves
    {% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
    {% for move in range(COOLING_MOVES|int) %}
      G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
      G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
    {% endfor %}
    # Generate a skinnydip move
    {% if USE_SKINNYDIP|int == 1 %}
      G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
      G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
      G4 P{COOLING_ZONE_PAUSE}
    {% endif %}
	# Final eject
        G92 E0
        G1 E-{UNLOAD_DISTANCE} F2500
		G92 E0

[gcode_macro M600]
gcode:
  SAVE_GCODE_STATE NAME=M600_state
  PAUSE
  UNLOAD_FILAMENT
  RESTORE_GCODE_STATE NAME=M600_state

[delayed_gcode HEATER_OFF]
gcode:
  M109 S0