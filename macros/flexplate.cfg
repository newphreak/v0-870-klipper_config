#####################################################################
#  Preperation 
#####################################################################
## copy this file in the same directory as your printer.cfg
## add 
##    [include flexplate.cfg]
## to your printer.cfg
##
## A [save_variables] block is needed since a printer save variable needs to be used to have it available after power up.
## You can skip this if you already have an [save_variables] config block
## e.g: 
##    [save_variables]
##    filename: /home/pi/klipper_config/.variables.stb
## I like to hide that file as there is nothing in that should be modified by the user.
## Do a klipper restart after adding the stuff above
##
## After klipper is back type 
##     INIT_PLATE_ARRAY
## in the console to initial the needed variables
## Thats all you need to do for the initial setup
##
#####################################################################
#  Normal usage Console
#####################################################################
## Init Array                : INIT_PLATE_ARRAY (one time action)
## List all plates           : LIST_PLATES
## Change act Plate          : _SET_PLATE INDEX=0 (any index number)
## Add New Plate             : ADD_NEW_PLATE
## Remove active Plate       : _REMOVE_PLATE
## Change offset of act Plate: CHANGE_PLATE_OFFSET OFFSET=0.001 (any new offset) 
## Change name of act Plate  : CHANGE_PLATE_NAME Name=test (any new name) 
##
#####################################################################
#  Normal usage LCD menu
#####################################################################
## you can do all what is listed above exluding list plates (not needed)
## change name is not implemented as I do not have a clue how to do the naming in the lcd
## The visibility of Menu Items depends on the printer state
##
#####################################################################
#  Get offset_z and name for own usage
#####################################################################
## use:  
##   {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
##   {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
## to get the needed parameter of the active plate
##
#####################################################################
#  Macros
#####################################################################
[delayed_gcode _DELAY_INIT_PLATE]
initial_duration: 1
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== _DELAY_INIT_PLATE ====')}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      _SET_PLATE_OFFSET MOVE='false'
    {% endif %}
  {% endif %}
  
[gcode_macro _SET_PLATE_OFFSET]
description: Execute gcode offset of the actual plate
gcode:
  # command params
  {% set move = params.MOVE|default('true') %}
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== _SET_PLATE_OFFSET ====')}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info("move: %s" % (move))}
    {action_respond_info('===============')}
  {% endif %}
  
  {% if ena_auto_z_offset == "flexplate" %}
    {% set move = params.MOVE|default('true') %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE:No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set index = printer.save_variables.variables.plate_index|int %}
      {% set plate_offset_z = plates[index][1] %}
      SET_GCODE_OFFSET Z=0
      {% if move == 'true' %}
        SET_GCODE_OFFSET Z_ADJUST={plate_offset_z|float} MOVE=1
      {% else %}
        SET_GCODE_OFFSET Z_ADJUST={plate_offset_z|float}
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}
  
[gcode_macro DISPLAY_PLATE]
description: Shows active plate and offset in console and display
gcode:
  # command params
  {% set text = params.TEXT|default('Used') %}
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== DISPLAY_PLATE ====')}
    {action_respond_info("text: %s" % (text))}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set index = printer.save_variables.variables.plate_index|int %}
      {% set plate_offset_z = plates[index][1] %}
      {% set plate_name = plates[index][0] %}
      M117 Plate: {plate_name}
      {action_respond_info("%s Plate: %s --> set z_offset: %01.3fmm" % (text, plate_name|string,plate_offset_z|float))}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}

# initial array this is only working as long the variables are not existing
# this is done to help users at the install
# usage: INIT_PLATE_ARRAY
[gcode_macro INIT_PLATE_ARRAY]
description: Initial array plate array
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== DISPLAY_PLATE ====')}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {% set array = namespace(output = '') %}
      {% set element = "[('First', 0.0)]" %}
      {% set array.output = array.output +  element %}
      SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
      SAVE_VARIABLE VARIABLE=plate_index VALUE=0
    {% else %}
      {action_respond_info("FLEXPLATE: Plate Array alread exists. ABORDED")}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}

[gcode_macro LIST_PLATES]
description: List all plates
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== LIST_PLATES ====')}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set array = namespace(output = '') %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set elem_count = plates|length %}
      {% set act_index = printer.save_variables.variables.plate_index|int %}
      {% set element = "Defined Plates:" %}
      {% set array.output = array.output + element + "\n"%}
      {% for index in range(elem_count) %}
        {% set element = "%-10s -> Offset: %01.3fmm -> Index: %-2d" % (plates[index][0], plates[index][1], index) %}
        {% set array.output = array.output + element + "\n"%}
      {% endfor %}
      {% set element = "Active Plate: %s" % (plates[act_index][0]) %}
      {% set array.output = array.output + "\n" + element + "\n"%}
      {action_respond_info("%s" % (array.output))}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}

[gcode_macro _SET_PLATE]
description: Set active plate by index
gcode:
  # command params
  {% set index = params.INDEX|default(0)|int %}
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== _SET_PLATE ====')}
    {action_respond_info("index: %s" % (index))}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set elem_count = plates|length %}
      # check INDEX in range
      {% if (index|int >= 0) and (index|int <= (elem_count-1)) %}
        SAVE_VARIABLE VARIABLE=plate_index VALUE={index|int}
        # DISPLAY_PLATE TEXT='Set'
        # check if printer is homed
        {% if "xyz" in printer.toolhead.homed_axes %}
          _SET_PLATE_OFFSET
        {% else %}
          {action_respond_info("Offset will be appied with next move")}
          _SET_PLATE_OFFSET MOVE='false'
        {% endif %}
      {% else %}
        {action_respond_info("FLEXPLATE: Index out of Range. ABORDED")}
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}

[gcode_macro ADD_NEW_PLATE]
description: Add a new plate to the array
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== ADD_NEW_PLATE ====')}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set array = namespace(output = '') %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set elem_count = plates|length %}
      # klipper can not store arrays elements so we need to do a string manipulation 
      {% for index in range(elem_count) %}
        {% set element = "('%s', %s), " % (plates[index][0], plates[index][1]) %}
        {% set array.output = array.output + element %}
      {% endfor %}
      # add new element
      {% set element = "('New', 0.0)" %}
      {% set array.output = array.output + element %}
      # add array boarders
      {% set array.output = "[%s]"% (array.output) %}
      SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}
  
[gcode_macro _REMOVE_PLATE]
description: Remove the active plate from array
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== _REMOVE_PLATE ====')}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set array = namespace(output = '') %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set act_index = printer.save_variables.variables.plate_index|int %}
      # check if last aray element needs to be deleted
      {% if act_index == (plates|length - 1) %}
        # last element will be deleted    
        {% set elem_count = plates|length - 1 %}
      {% else %}
        {% set elem_count = plates|length %}
      {% endif %}
      # check if array contains only one element
      {% if elem_count <= 1%}
        {action_respond_info("FLEXPLATE: Last Plate can not be deleted. ABORDED")}
      {% else %}
        # klipper can not store arrays elements so we need to do a string manipulation 
        {% for index in range(elem_count) %}
          {% if index != act_index %}
            {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
            {% set array.output = array.output + element %}
            # add seperator where needed
            {% if index != (elem_count-1) %}
              {% set element = ", " %}
              {% set array.output = array.output + element %}
            {% endif %}
          {% endif %}
        {% endfor %}
        # add array boarders
        {% set array.output = "[%s]"% (array.output) %}
        SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
        SAVE_VARIABLE VARIABLE=plate_index VALUE=0
        # DISPLAY_PLATE TEXT='Set'
        # check if printer is homed
        {% if "xyz" in printer.toolhead.homed_axes %}
          _SET_PLATE_OFFSET
        {% else %}
          {action_respond_info("Offset will be appied with next move")}
          _SET_PLATE_OFFSET MOVE='false'
        {% endif %}
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}

[gcode_macro CHANGE_PLATE_OFFSET]
description: Change offset of the actual selected plate
gcode:
  # command params
  {% set offset = params.OFFSET|default(0.0)|float %}
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== CHANGE_PLATE_OFFSET ====')}
    {action_respond_info("offset: %s" % (offset))}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set array = namespace(output = '') %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set elem_count = plates|length %}
      {% set act_index = printer.save_variables.variables.plate_index|int %}
      # klipper can not store arrays elements so we need to do a string manipulation 
      {% for index in range(elem_count) %}
        # chech for element to change
        {% if index == act_index %}
          {% set element = "('%s', %s)" % (plates[index][0], offset) %}
        {% else %}
          {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
        {% endif %}
        {% set array.output = array.output + element %}
        # add seperator where needed
        {% if index != (elem_count-1) %}
          {% set element = ", " %}
          {% set array.output = array.output + element %}
        {% endif %}
      {% endfor %}
      # add array boarders
      {% set array.output = "[%s]"% (array.output) %}
      SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
      # DISPLAY_PLATE TEXT='Set'
      # check if printer is homed
      {% if "xyz" in printer.toolhead.homed_axes %}
        _SET_PLATE_OFFSET
      {% else %}
        {action_respond_info("Offset will be appied with next move")}
        _SET_PLATE_OFFSET MOVE='false'
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}
  
[gcode_macro CHANGE_PLATE_NAME]
description: Change name of the actual selected plate
gcode:
  # command params
  {% set name = params.NAME|default('New') %}
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== CHANGE_PLATE_NAME ====')}
    {action_respond_info("name: %s" % (name))}
    {action_respond_info("ena_auto_z_offset: %s" % (ena_auto_z_offset))}
    {action_respond_info('===============')}
  {% endif %}

  {% if ena_auto_z_offset == "flexplate" %}
    {% if not printer.save_variables.variables.plate_array %}
      {action_respond_info("FLEXPLATE: No Plate Array defined, please run INIT_PLATE_ARRAY")}
    {% else %}
      {% set array = namespace(output = '') %}
      {% set plates = printer.save_variables.variables.plate_array %}
      {% set elem_count = plates|length %}
      {% set act_index = printer.save_variables.variables.plate_index|int %}
      # klipper can not store arrays elements so we need to do a string manipulation
      {% for index in range(elem_count) %}
        # chech for element to change
        {% if index == act_index %}
          {% set element = "('%s', %s)" % (name, plates[index][1]) %}
        {% else %}
          {% set element = "('%s', %s)" % (plates[index][0], plates[index][1]) %}
        {% endif %}
        {% set array.output = array.output + element %}
        # add seperator where needed
        {% if index != (elem_count-1) %}
          {% set element = ", " %}
          {% set array.output = array.output + element %}
        {% endif %}
      {% endfor %}
      # add array boarders
      {% set array.output = "[%s]"% (array.output) %}
      SAVE_VARIABLE VARIABLE=plate_array VALUE="{array.output}"
    {% endif %}
  {% else %}
    {action_respond_info("FLEXPLATE: Not enabled")}
  {% endif %}

[gcode_macro SHEET_ENERGETIC_Textured]
gcode:
	_SET_PLATE INDEX=0

[gcode_macro SHEET_ENERGETIC_Smooth]
gcode:
	_SET_PLATE INDEX=1

[gcode_macro SHEET_Mitsubishi]
gcode:
	_SET_PLATE INDEX=2

[gcode_macro SHEET_Mitsubishi_cold]
gcode:
	_SET_PLATE INDEX=3