[gcode_shell_command backup_cfg]
command: sh /home/pi/klipper_config/autocommit.sh
timeout: 30.0
verbose: True

[gcode_macro temperature]
gcode:
#  {% set load_distance = printer['gcode_macro _USER_VARIABLE'].load_distance|int %}
#02:31:06 !! Error evaluating 'gcode_macro temperature:gcode': UndefinedError: list object has no element Undefined
      {% set filament = printer['gcode_macro _USER_VARIABLE'].filament_temperatures %}
#      {% set index = printer.save_variables.variables.plate_index|int %}
      {% set filamentindex = params.I|int %}
#      {% set filamentindex = 1|int %}
      {% set unload_temperature = filament[filamentindex][1] %}
      {% set load_temperature = filament[filamentindex][2] %}
      {% set filament_type = filament[filamentindex][0] %}
      {action_respond_info("%s Filament: %s Unload temperature: %sc Load temperature: %sc" % (text, filament_type|string,unload_temperature|int,load_temperature|int))}
#variable_unload_temperatures: [('PLA', 195), ('ABS', 220), ('PETG', 230), ('TPU', 200)]		; Temperatures to unload different filament types with


# source: https://github.com/vladbabii/klipper.macro.run_before_after
[gcode_macro RUN_BA]
gcode:
   {% set type = "after" %}
   {% set event = "nothing" %}

   {% if params.TYPE is defined %}
     {% set type = params.TYPE|lower %}
   {% endif %}

   {% if params.EVENT is defined %}
     {% set event = params.EVENT|lower %}
   {% endif %}

   {% set search = type ~ "_" ~ event %}
   {% set list = namespace(value="") %}

   {% for name1 in printer %}
      {% if name1[0:12] == "gcode_macro " %}
         {% for name2 in printer[name1] %}
            {% if name2|lower == search %}
               {% set list.value = list.value ~ "," ~ ((printer[name1][name2]|int + 1000 ) ~ "---" ~ name1[12:] )|string %}
            {% endif %}
         {% endfor %}
     {% endif %}
   {% endfor %}
   {% set list2 = list.value.split(',') %}
   {% for i in list2|sort %}
      {% if i|trim|length > 1 %}
#         RESPOND PREFIX="info" MSG="Run_BA > Running {type} {event}: {i[7:]}"
         {i[7:]}
      {% endif %}
   {% endfor %}

[gcode_macro TOGGLE_DEBUG]
description: Toggle the macro debug.
gcode:
	{% set ena_debug = printer.save_variables.variables.debug|lower %}
	{% if ena_debug == "true" %}
		{action_respond_info('==== TOGGLE_DEBUG ====')}
		{action_respond_info("ena_debug: %s" % (ena_debug))}
		{action_respond_info('===============')}
	{% endif %}
	{% if ena_debug == "false" %}
		{action_respond_info('debug is off, turning it on')}
		SAVE_VARIABLE VARIABLE=debug VALUE='"true"'
	{% else %}
		{action_respond_info('debug is on, turning it off')}
		SAVE_VARIABLE VARIABLE=debug VALUE='"false"'
	{% endif %}

[gcode_macro BACKUP_CFG]
gcode:
  RUN_SHELL_COMMAND CMD=backup_cfg

[delayed_gcode _CHECK_CONFIG]
initial_duration: 0.1
gcode:
  ## exexcute _USER_VARIABLE once at startup to do the needed calcs
  {% if printer['gcode_macro _USER_VARIABLE'] is not defined %}
    { action_respond_info(
        "CONFIG: ERROR\n"
        "_USER_VARIABLE macro missing\n"
        "This holds common variables for your printer and must be defined") }
  {% else %}
    _USER_VARIABLE
    ##### consistent check #####
    {% if printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower == 'z_calib' and 
      printer['gcode_macro _USER_VARIABLE'].probe_type|lower == 'unknown' %}
      {action_respond_info(
      "CONFIG: ERROR\n"
      "[z_calibration] defined but no probe found\n")}
    {% endif %}    
  {% endif %}
  ## check if save_variables are defined
  {% if 'save_variables' not in printer %}
    {action_respond_info(
      "CONFIG: ERROR\n"
      "[save_variables] missing\n"
      "This is needed to store variables to a file")}
  {% endif %}

[gcode_macro DUMP_PARAMETERS]
description: Dump all Klipper parameters to terminal
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['bed_mesh','configfile'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(parameters.output)}

[gcode_macro DUMP_CONFIG]
description: Debug: Print the selected entrie of the printer config object
gcode:
  {% if 'S' in params %}
    {% set parameters = [] %}
    {% for name1 in printer.configfile.config %}
      {% if name1 is in [params.S] %}
        {% for name2 in printer.configfile.config[name1]|sort %}
          {% set parameters = parameters.append("printer.configfile.config['%s'].%s = %s" % (name1, name2, printer.configfile.config[name1][name2])) %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% else %}
    {action_respond_info("WARNING: parameter S needed call e.g. DUMP_CONFIG S='printer'")}
  {% endif %}

[gcode_macro DUMP_SETTINGS]
description: Debug: Print the selected entrie of the printer settings object
gcode:
  {% if 'S' in params %}
    {% set parameters = [] %}
    {% for name1 in printer.configfile.settings %}
      {% if name1 is in [params.S] %}
        {% for name2 in printer.configfile.settings[name1]|sort %}
          {% set parameters = parameters.append("printer.configfile.settings['%s'].%s = %s" % (name1, name2, printer.configfile.settings[name1][name2])) %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% else %}
    {action_respond_info("WARNING: parameter S needed call e.g. DUMP_SETTINGS S='printer'")}
  {% endif %}

[gcode_macro SEARCH_VARS]
gcode:
  {% set search = params.S|lower %}
  {% set ns = namespace() %}
  {% for item in printer  %}
    {% if ' ' in item %}
      {% set ns.path = ['printer', "['%s']" % (item), ''] %}
    {% else %}
      {% set ns.path = ['printer.', item, ''] %}   
    {% endif %} 

    {% if search in ns.path|lower %}
        { action_respond_info(ns.path|join) }
    {% endif %} 

    {% if printer[item].items() %}
      {% for childkey, child in printer[item].items() recursive %}
        {% set ns.path = ns.path[:loop.depth|int + 1] %}
        {% if ' ' in childkey %}
          {% set null = ns.path.append("['%s']" % (childkey)) %}
        {% else %}
          {% set null = ns.path.append(".%s" % (childkey)) %}
        {% endif %} 
        {% if child is mapping  %}
          { loop(child.items()) }
        {% else %}
          {% if search in ns.path|lower %}
            { action_respond_info("%s : %s" % (ns.path|join, child)) }   
          {% endif %} 
        {% endif %} 
      {% endfor %}
    {% endif %} 
  {% endfor %}

[gcode_macro DUMP_WARNINGS]
description: Debug: Print all warning messages from klipper
gcode:
  {% set parameters = ["printer.configfile.warnings:"] %}
  {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
  {% endfor %}
  {action_respond_info(parameters|join("\n"))}

# Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
[gcode_macro TEST_SPEED]
description: Command to LINEAR and DIAGONAL acceleration. Compare the GET_POSITION output before and after, see if you skipped steps. IIRC you want the "mcu" line to show within 16 before and after (a full step)
gcode:
  # command params
  {% set i = params.I|default(1)|int %}
  {% set da = params.DIAGONAL_ACCEL|default(27000)|int %}
  {% set la = params.LINEAR_ACCEL|default(36000)|int %}
  # variables 
  {% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|float %}
  {% set min_x = printer.toolhead.axis_minimum.x|float %}
  {% set min_y = printer.toolhead.axis_minimum.y|float %}
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float - boarder_delta %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== TEST_SPEED ====')}
    {action_respond_info("i: %s" % (i))}
    {action_respond_info("da: %s" % (da))}
    {action_respond_info("la: %s" % (la))}
    {action_respond_info("min_x: %s" % (min_x))}
    {action_respond_info("min_y: %s" % (min_y))}
    {action_respond_info("max_x: %s" % (max_x))}
    {action_respond_info("max_y: %s" % (max_y))}
    {action_respond_info('===============')}
  {% endif %}

  SAVE_GCODE_STATE NAME=TEST_SPEED
  G28 X Y
  GET_POSITION
  G90
  {% for iteration in range(i|int) %}
    G1 X{min_x} Y{min_y} F{da}
    G1 X{max_x} Y{max_y} F{da}
    G1 X{min_x} Y{min_y} F{da}
    G1 X{max_x} Y{max_y} F{da}

    G1 X{min_x} Y{max_y} F{la}

    G1 X{max_x} Y{min_y} F{da}
    G1 X{min_x} Y{max_y} F{da}
    G1 X{max_x} Y{min_y} F{da}
    G1 X{min_x} Y{max_y} F{da}

    G1 X{min_x} Y{min_y} F{la}
    G1 X{max_x} Y{min_y} F{la}
    G1 X{max_x} Y{max_y} F{la}
    G1 X{min_x} Y{max_y} F{la}
    G1 X{min_x} Y{min_y} F{la}
  {% endfor %}
  G28 X Y
  GET_POSITION
  RESTORE_GCODE_STATE NAME=TEST_SPEED