#########NEEDED IN SLICER FOR TEMPERATURES TO WORK###########################################################################################################################
## PRINT_START BED=[first_layer_bed_temperature] EXTRUDER=[first_layer_temperature] CHAMBER=[chamber_temperature] FILAMENT={filament_type[0]} ##
#############################################################################################################################################################################
[gcode_macro PRINT_START]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|default("ABS")|upper %}
  # variables 
  {% set plate_offset_z = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][1] %}
  {% set plate_name = printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int][0] %}
  {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
  {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
  {% set unretract_start = printer['gcode_macro _USER_VARIABLE'].unretract_start|float %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% set ena_auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  {% set ena_quad_gantry_level = printer['gcode_macro _USER_VARIABLE'].quad_gantry_level|lower %}
  {% set ena_bed_mesh = printer['gcode_macro _USER_VARIABLE'].bed_mesh|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== PRINT_START ====')}
    {action_respond_info("targets: [bed: %s, extruder: %s, chamber: %s, filament_type: %s]" % (target_bed,target_extruder,target_chamber,filament_type))}
    {action_respond_info("features: [auto_z_offset: %s, quad_gantry_level: %s, bed_mesh: %s]" % (ena_auto_z_offset,ena_quad_gantry_level,ena_bed_mesh))}
    {% if printer.bed_mesh %}
      {action_respond_info("bed_mesh: [profile_name: %s]" % (printer.bed_mesh.profile_name))}
    {% endif %}
    {% if ena_auto_z_offset == "flexplate" %}
      {action_respond_info("flexplate: [name: %s, offset_z: %s]" % (plate_name,plate_offset_z))}
    {% endif %}
    {action_respond_info("unretract_start: [%s]" % (unretract_start))}
    {action_respond_info('===============')}
  {% endif %}

  {default_display_lights_color} CASE=0
  {default_case_lights_color} DISPLAY=0
  M117 Homing
  G28
  _PREHEAT_CHAMBER BED={target_bed} CHAMBER={target_chamber} FILAMENT={filament_type}
  {% if ena_quad_gantry_level == "true" or ena_bed_mesh == "true" or ena_auto_z_offset == "z_calib" %}
    {% if ena_quad_gantry_level == "true" and not printer.quad_gantry_level.applied %}
      M117 Calibrating QGL
      QUAD_GANTRY_LEVEL
      G28 Z
    {% endif %}
    {% if ena_auto_z_offset == "z_calib" %}
      M117 Calibrating Z
      CALIBRATE_Z
    {% elif ena_auto_z_offset == "flexplate" and printer.save_variables.variables.plate_array[printer.save_variables.variables.plate_index|int] %}
      M117 Setting Z Offset
      DISPLAY_PLATE
      _SET_PLATE_OFFSET
    {% endif %}
    {% if ena_bed_mesh == "true" %}
      {% if printer.bed_mesh.profile_name %}
        M119 Loading Mesh {printer.bed_mesh.profile_name}
        BED_MESH_PROFILE LOAD={printer.bed_mesh.profile_name}
      {% else %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        BED_MESH_PROFILE LOAD=default
      {% endif %}
    {% endif %}
  {% endif %}
  M117 Heating ~extruder~: {target_extruder}~degrees~
  M109 S{target_extruder}
  SAVE_VARIABLE VARIABLE=extruder_temp_previous VALUE={target_extruder|int}
  G1 Z5 F5000
  G90
  M83
  G1 E{unretract_start} F600
  G92 E0
  white
  M117 Printer goes brrr

[gcode_macro _soak_timer_before]
variable_before_soak_timer: 1
gcode:
	SET_GCODE_VARIABLE MACRO=_soak_timer_after VARIABLE=time_started VALUE='"{(printer['print_stats'].total_duration/60|float|round(0)|int)}"'

[gcode_macro _soak_timer_after]
variable_after_soak_timer: 2
variable_time_started: 0
gcode:
  # variables
  {% set preheat_min_soak_time = printer['gcode_macro _USER_VARIABLE'].preheat_min_soak_time %}
  {% set time_ended = (printer['print_stats'].total_duration/60|int) %}
  {% set already_soaked_time = (time_ended|float|round(0)|int-time_started|float|round(0)|int) %}
  {% if already_soaked_time > preheat_min_soak_time %}
    {% set preheat_min_soak_time = 0 %}
  {% endif %}
  {% if already_soaked_time < preheat_min_soak_time %}
    {% set preheat_min_soak_time = (preheat_min_soak_time-already_soaked_time) %}
  {% endif %}
  SET_GCODE_VARIABLE MACRO=_TIMED_SOAK VARIABLE=preheat_min_soak_time VALUE='"{preheat_min_soak_time}"'
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== TIMED SOAK CALCULATIONS ====')}
    {action_respond_info("time_started: [%s]" % (time_started|float|round(0)|int))}
    {action_respond_info("time_ended: [%s]" % (time_ended|float|round(0)|int))}
    {action_respond_info("already_soaked_time: [%s]" % (already_soaked_time))}
    {action_respond_info("preheat_min_soak_time: [%s]" % (preheat_min_soak_time))}
    {action_respond_info('===============')}
  {% endif %}

[gcode_macro _TIMED_SOAK]
variable_after_timed_soak: 3
variable_preheat_min_soak_time: 0
gcode:
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  {% if ena_debug == "true" %}
    {action_respond_info('==== TIMED SOAK ====')}
    {action_respond_info("preheat_min_soak_time: [%s]" % (preheat_min_soak_time))}
    {action_respond_info('===============')}
  {% endif %}
  # Timed bed soak
  {% if preheat_min_soak_time > 0 %}
    {% for timer in range(preheat_min_soak_time|int,0,-1) %}
    M117 Soaking ~bed~ {timer|int}m 
    M105
    G4 P60000
    {% endfor %}
  {% endif %}

[gcode_macro _PREHEAT_CHAMBER]
gcode:
  # command params
  {% set target_bed = params.BED|default(110)|int %}
  {% set target_extruder = params.EXTRUDER|default(150)|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|default("ABS")|upper %}
  # variables 
  {% set preheat_filament_types = printer['gcode_macro _USER_VARIABLE'].preheat_filament_types %}
  {% set preheat_min_soak_time = printer['gcode_macro _USER_VARIABLE'].preheat_min_soak_time %}
  {% set park_x = printer['gcode_macro _USER_VARIABLE'].center_x %}
  {% set park_y = printer['gcode_macro _USER_VARIABLE'].center_y %}
  {% set park_z = printer['gcode_macro _USER_VARIABLE'].z_min_delta|float %}
  {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
  {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}

  {% if ena_debug == "true" %}
    {action_respond_info('==== PREHEAT_CHAMBER ====')}
    {action_respond_info("targets: [bed: %s, extruder: %s, chamber: %s]" % (target_bed,target_extruder,target_chamber))}
	{action_respond_info("preheat_min_soak_time: [%s]" % (preheat_min_soak_time))}
    {action_respond_info("filament_type: [%s] preheat_types: [%s]" % (filament_type,preheat_filament_types))}
    {action_respond_info("park: [x: %s,y: %s,z: %s]" % (park_x,park_y,park_z))}
    {action_respond_info('===============')}
  {% endif %}
  
  orange
  M117 Preheat Start
  G90 # absolute positioning
  G0 X{park_x} Y{park_y} Z{park_z} F18000
  # Chamber/time soak for some filament types
  {% if filament_type in preheat_filament_types %}
    M106 S255 # Turn on Part Cooling Fan to 100%
    _CIRCULATION_START FILAMENT={filament_type}
  {% endif %}
  # Bring the extruder and bed up to targets
  M104 S{target_extruder}
  M117 Heating ~bed~{target_bed}~degrees~
  M190 S{target_bed}
  RUN_BA EVENT=soak_timer TYPE="before"
  # Chamber soak
  {% if printer['temperature_sensor chamber'] and target_chamber > 0 and printer['temperature_sensor chamber'].temperature < target_chamber %}
    M117 Soaking ~chamber~ {target_chamber}~degrees~
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
  {% else %}
    G4 P10
  {% endif %}
  RUN_BA EVENT=soak_timer TYPE="after"
  RUN_BA EVENT=timed_soak TYPE="after"
  {default_display_lights_color} CASE=0
  {default_case_lights_color} DISPLAY=0
  M117 Preheat Done

[gcode_macro PRINT_END]
gcode:
  # command params
  {% set filament_type = params.FILAMENT|default("PLA")|upper %}
  {% set velocity = printer.configfile.config.pause_resume.recover_velocity|int %}
  # variables
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set wipe_out = printer['gcode_macro _USER_VARIABLE'].wipe_out|float %}
  {% set retract_end = printer['gcode_macro _USER_VARIABLE'].retract_end|float %}
  {% set retract_pause = printer['gcode_macro _USER_VARIABLE'].retract_pause|float %}
  {% set default_display_lights_color = printer['gcode_macro _USER_VARIABLE'].default_display_lights_color|lower %}
  {% set default_case_lights_color = printer['gcode_macro _USER_VARIABLE'].default_case_lights_color|lower %}
  # features
  {% if act_x < (max_x-wipe_out) %}
	{% set safe_x = wipe_out %}
  {% else %}
    {% set safe_x = max_x-act_x %}
  {% endif %}
  {% if act_y < (max_y-wipe_out) %}
    {% set safe_y = wipe_out %}
  {% else %}
    {% set safe_y = max_y - act_y %}
  {% endif %}
  {% if (max_z-act_z) > 0.3 %}
  {% set safe_z_wipe_height = 0.3 %}
  {% set safe_z = (((max_z-act_z)/3)-0.3) %}
  {% else %}
  {% set safe_z = ((max_z-act_z)/3) %}
  {% endif %}
  {% set b2b_state = printer.save_variables.variables.b2b_state|lower %}
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== PRINT_END ====')}
    {action_respond_info("filament_type: [%s]" % (filament_type))}
    {action_respond_info("retract_end: [%s]" % (retract_end))}
	{action_respond_info("actual: [X:%s Y:%s Z:%s]" % (act_x,act_y,act_z))}
	{action_respond_info("max: [X:%s Y:%s Z:%s]" % (max_x,max_y,max_z))}
	{action_respond_info("safe: [X:%s Y:%s Z:%s]" % (safe_x,safe_y,safe_z))}
    {action_respond_info("safe_z_wipe_height: [%s] wipe_out: [%s]" % (safe_z_wipe_height,wipe_out))}
	{action_respond_info("pause/resume velocity: [%s]" % (velocity))}
    {action_respond_info("b2b_state: [%s]" % (b2b_state))}
    {action_respond_info('===============')}
  {% endif %}

  M400  # wait for buffer to clear
  G91
  g92 E0
  G1 E-{retract_pause} F800  # retract filament
  {% if safe_z_wipe_height > 0 %}
  G0 Z{safe_z_wipe_height} F{velocity*60}
  G0 X{safe_x} Y{safe_y} F{velocity*60}
  G0 Z{safe_z-safe_z_wipe_height} F{velocity*60}
  {% else %}
  G0 X{safe_x} Y{safe_y} F{velocity*60}
  G0 Z{safe_z} F{velocity*60}
  {% endif %}
  g92 E0
  G1 E-{retract_end-retract_pause} F800

  {% if b2b_state == "off" %}
    {action_respond_info('Ending print')}
    TURN_OFF_HEATERS
    M107  # turn off fan
    G90 # absolute positioning
    G28 X Y
    M117 Print complete!
    M84
    _CIRCULATION_END FILAMENT={filament_type}
    M117
    {default_display_lights_color} CASE=0
    {default_case_lights_color} DISPLAY=0
  {% else %}
	{action_respond_info('Waiting for next print. Holding temperature.')}
    M104 S150
    G28 X Y
  {% endif %}
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  # command params
  # variables 
  # features
  {% set ena_debug = printer.save_variables.variables.debug|lower %}
  
  {% if ena_debug == "true" %}
    {action_respond_info('==== CANCEL_PRINT ====')}
    {action_respond_info('===============')}
  {% endif %}

  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  BASE_CANCEL_PRINT
  
[gcode_macro TOGGLE_BACK_TO_BACK]
description: Toggle back to back printing.
gcode:
  # command params
  # variables 
  {% set b2b_state = printer.save_variables.variables.b2b_state|lower %}
  {% if printer['gcode_macro _USER_VARIABLE'].debug == 1 %}
	{action_respond_info('==== TOGGLE_BACK_TO_BACK ====')}
	{action_respond_info("back to back printing: %s" % (b2b_state))}
	{action_respond_info('===============')}
  {% endif %}
  {% if b2b_state == "off" %}
	{action_respond_info('back to back printing is off, turning it on')}
	SAVE_VARIABLE VARIABLE=b2b_state VALUE='"on"'
  {% else %}
	{action_respond_info('back to back printing is on= turning it off')}
	SAVE_VARIABLE VARIABLE=b2b_state VALUE='"off"'
  {% endif %}