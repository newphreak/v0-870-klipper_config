#####################################
#       Printer Tuning Macros       #
#####################################

# From (https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/Macros/TEST_SPEED.cfg)
# Please read (https://github.com/AndrewEllis93/Print-Tuning-Guide#determining-maximum-speeds-and-accelerations) for details on how to use this macro.
#
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
description: Used to test max SPEED and ACCEL
gcode:
    # command params
    {% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set bound = params.BOUND|default(20)|int %}
    {% set debug = params.DEBUG|default(0)|int %}
    # variables
    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
    # features
    {% set ena_debug = printer.save_variables.variables.debug|default("false")|lower %}

    {% if ena_debug == "true" or debug == 1 %}
        {action_respond_info("==== TEST_SPEED ====")}
        {action_respond_info("speed: '%s'" % (speed))}
        {action_respond_info("iterations: '%s'" % (iterations))}
        {action_respond_info("bound: '%s'" % (bound))}
        {action_respond_info("new_z_offset: '%s'" % (new_z_offset))}
        {action_respond_info("min: [x: '%s', y:'%s']" % (x_min,y_min))}
        {action_respond_info("max: [x: '%s', y:'%s']" % (x_max,y_max))}
        {action_respond_info("===============")}
    {% endif %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Absolute positioning
    G90

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    # Home and get position for comparison later:
    G28
    # QGL if not already QGLd (only if QGL section exists in config)
    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
    G4 P1000
    GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

    {% for i in range(iterations) %}
        # Diagonals
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
        # Box
        G0 X{x_min} Y{y_min} F{speed * 60}
        G0 X{x_min} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_max} F{speed * 60}
        G0 X{x_max} Y{y_min} F{speed * 60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

    # Re-home XY and get position again for comparison:
    G28 X Y
    # Go to XY home positions (in case your homing override leaves it elsewhere)
    G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
    G4 P1000
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED