[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### Filament #####
; Temperatures to load/unload different filament types with. ('Filamenttype', unload_temperature, load_temperature)
variable_filament_temperatures: [('PLA', 195, 205), ('ABS', 220, 240), ('PET', 215, 250), ('FLEX', 215, 230), ('ASA', 220, 250), ('NYLON', 230, 250), ('PC', 260, 280)]
variable_preheat_filament_types: ['ABS','ASA']      			; list of filamnet types we need to preheat for
variable_nevermore_filament_types: ['ABS','ASA']    			; list of filamnet types we need use nevermore for
variable_nevermore_use_time: 80                      			; Nevermore change warning limit (In hours)
variable_extruder_idle_temp: 150                    			; Idle temp for the extruder (Pause etc)
variable_cooldown_bed_temperature: 80               			; Temperature to stop fans at, and finish print (Print end)
variable_preheat_min_soak_time: 5                   			; minimum time we need to soak the bed for (Print start)
variable_unretract_start: 8.5                         			; retract distance at PRINT_END or CANCEL_PRINT
variable_retract_end: 10                            			; retract distance at PRINT_END or CANCEL_PRINT
variable_retract_pause: 3                           			; retract/extrude distance while PAUSE or RESUME
##### Filament load #####
variable_load_distance: 45                        				; load distance while loading filament
variable_load_extrude: 50 	                         			; extrude distance while loading filament
##### Filament unload #####
variable_unload_distance: 70	                       			; unload distance while unloading filament
variable_cooling_tube_length: 15								; Dragon ST: 15, Dragon HF: 10, Mosquito: 20 Dragonfly: ??
variable_cooling_tube_retraction: 35							; Dragon ST: 35, Dragon HF: 30, Mosquito: 38 Dragonfly: ??
variable_initial_cooling_speed: 10								; 10 by default
variable_final_cooling_speed: 50								; 50 by default
variable_cooling_moves: 5										; 5 by default
variable_use_skinnydip: 1										; on by default
variable_skinnydip_distance: 26									; 26 by default
variable_dip_insertion_speed: 33								; 33 by default
variable_dip_extraction_speed: 60								; 70 by default. 50 works better on v0.
variable_cooling_zone_pause: 0  								; 0 by default. in ms. 400 let's it cool longer before entering gears. Needed? maybe not.
variable_unloading_speed_start: 60								; 199 by default, too high. Lowered to 40 for v0. Unknown on v2, as 199 kinda worked.
variable_unloading_speed: 20									; 20 by default
variable_ramming_volume: 15										; 0 by default. is in mm3. Trying 15. No idea if it has any impact.
##### Display info #####
variable_display_lcd_type: 'sh1106'             ; none/uc1701/sh1106 what type of display do we have
variable_default_display_lights_color: 'blue'   ; what should be the "resting" LED display color
variable_default_case_lights_color: 'blue'      ; what should be the "resting" LED case color
variable_display_uc1701_led_index_3_r: 0.6      ; what should be the second knob color on this display
variable_display_uc1701_led_index_3_g: 1.0      ; what should be the second knob color on this display
variable_display_uc1701_led_index_3_b: 1.0      ; what should be the second knob color on this display
##### Park Position #####
variable_boarder_delta: 5   ; distance for x or y from the edge (Pause)
variable_z_max_delta: 40    ; ensure to do not hit cam in front (Parking) Needed?
variable_z_min_delta: 15    ; minimal z from bed (Parking) Needed?
variable_wipe_out: 3        ; distance to wipe both direction to break string (Cancel/End)
variable_center_x: 0        ; center off bed (Calculated below)
variable_center_y: 0        ; center off bed (Calculated below)
variable_center_z: 0        ; center off bed (Calculated below)
##### additional hardware
variable_bed_screws: 'false'        ; true is bed screws adjust found in cfg
variable_display_lights: 'false'    ; true is neopixel display_lights found in cfg
variable_case_lights: 'false'       ; true is neopixel case_lights found in cfg
variable_exhaust_fan: 'false'       ; true is fan_generic exhaust_fan found in cfg
variable_nevermore_fan: 'false'     ; true is fan_generic nevermore_fan found in cfg
variable_chamber_sensor: 'false'    ; true is temperature_sensor chamber found in cfg
variable_frame_sensor: 'false'      ; true is temperature_sensor frame found in cfg
variable_auto_z_offset: 'none'      ; none/flexplate/z_calib depends what is found in cfg
variable_probe_type: 'unknown'      ; unknown/dockable/static what type of probe found in cfg
variable_bed_mesh: 'false'          ; true is bed_mesh frame found in cfg
variable_quad_gantry_level: 'false' ; true is quad_gantry_level found in cfg
gcode:
    ##### get printer limits and position #####
    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set min_x = printer.toolhead.axis_minimum.x|float %} # <- where is min_x used?? Parking
    ##### calc needed variables #####
    {% set x_center = max_x / 2 %}
    {% set y_center = max_y / 2 %}
    {% set z_center = max_z / 2 %}
    #   ##### store results #####
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=center_x VALUE={x_center}
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=center_y VALUE={y_center}
    SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=center_z VALUE={z_center}
    ##### detect additional hardware #####
    {% if 'bed_screws' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=bed_screws VALUE='"true"'
    {% endif %}
    {% if 'neopixel display_lights' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=display_lights VALUE='"true"'
    {% endif %}
    {% if 'neopixel case_lights' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=case_lights VALUE='"true"'
    {% endif %}
    {% if 'temperature_sensor chamber' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=chamber_sensor VALUE='"true"'
    {% endif %}
    {% if 'temperature_sensor frame' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=frame_sensor VALUE='"true"'
    {% endif %}
    {% if 'fan_generic exhaust_fan' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=exhaust_fan VALUE='"true"'
    {% endif %}
    {% if 'fan_generic nevermore_fan' in printer.configfile.settings %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=nevermore_fan VALUE='"true"'
    {% endif %}
    {% if printer.bed_mesh is defined %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=bed_mesh VALUE='"true"'
    {% endif %}
    {% if printer.quad_gantry_level is defined %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=quad_gantry_level VALUE='"true"'
    {% endif %}
    {% if printer.z_calibration is defined %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=auto_z_offset VALUE='"z_calib"'
    {% elif printer['gcode_macro _SET_PLATE_OFFSET'] is defined %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=auto_z_offset VALUE='"flexplate"'
    {% endif %}
    {% if printer.dockable_probe is defined %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe_type VALUE='"dockable"'
    {% elif printer.probe is defined %}
        SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe_type VALUE='"static"'
    {% endif %}

[gcode_macro DISPLAY_FEATURES]
description: Show all features and their enabled states
gcode:
  {% set auto_z_offset = printer['gcode_macro _USER_VARIABLE'].auto_z_offset|lower %}
  {% set bed_mesh = printer['gcode_macro _USER_VARIABLE'].bed_mesh|lower %}
  {% set beeper = printer.save_variables.variables.beeper|default("false")|lower %}
  {% set case_lights = printer['gcode_macro _USER_VARIABLE'].case_lights|lower %}
  {% set chamber_sensor = printer['gcode_macro _USER_VARIABLE'].chamber_sensor|lower %}
  {% set debug = printer.save_variables.variables.debug|default("false")|lower %}
  {% set display_lights = printer['gcode_macro _USER_VARIABLE'].display_lights|lower %}
  {% set exhaust_fan = printer['gcode_macro _USER_VARIABLE'].exhaust_fan|lower %}
  {% set frame_sensor = printer['gcode_macro _USER_VARIABLE'].frame_sensor|lower %}
  {% set nevermore_fan = printer['gcode_macro _USER_VARIABLE'].nevermore_fan|lower %}
  {% set probe_type = printer['gcode_macro _USER_VARIABLE'].probe_type|lower %}
  {% set quad_gantry_level = printer['gcode_macro _USER_VARIABLE'].quad_gantry_level|lower %}
  {% set back_to_back = printer.save_variables.variables.b2b_state|default("false")|lower %}
  {% set bed_screws = printer['gcode_macro _USER_VARIABLE'].bed_screws|lower %}

  {action_respond_info('==== DISPLAY_FEATURES ====')}
  {action_respond_info("auto_z_offset: %s" % (auto_z_offset))}
  {action_respond_info("bed_mesh: %s" % (bed_mesh))}
  {action_respond_info("beeper: %s" % (beeper))}
  {action_respond_info("case_lights: %s" % (case_lights))}
  {action_respond_info("chamber_sensor: %s" % (chamber_sensor))}
  {action_respond_info("debug: %s" % (debug))}
  {action_respond_info("display_lights: %s" % (display_lights))}
  {action_respond_info("exhaust_fan: %s" % (exhaust_fan))}
  {action_respond_info("frame_sensor: %s" % (frame_sensor))}
  {action_respond_info("nevermore_fan: %s" % (nevermore_fan))}
  {action_respond_info("probe_type: %s" % (probe_type))}
  {action_respond_info("quad_gantry_level: %s" % (quad_gantry_level))}
  {action_respond_info("back_to_back: %s" % (back_to_back))}
  {action_respond_info("bed_screws: %s" % (bed_screws))}
  {action_respond_info('===============')}